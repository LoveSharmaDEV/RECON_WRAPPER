###################################################################################################################################################################
declare -a WILD_STRINGS
declare -a Temporary_Domains
declare -a Level_Domains
TOOLS=("CRTSH" "BUFFER" "FINDOMAIN" "SUBFINDER")

file_organize()
{	
	cat ./"$source"/"$source"_"$1".txt 2>/dev/null | sort -u >>  ./"$source"/"$source"_"$1"_final.txt
}

file_merge()
{
	cat ./"$source"/"$source"_"$1"_final.txt ./"$source"/"$source"_"$2"_final.txt ./"$source"/"$source"_"$3"_final.txt ./"$source"/"$source"_"$4"_final.txt  > ./"$source"/"$source".txt
	cat ./"$source"/"$source".txt | sort -u >> ./"$source"/"$source"_final.txt
	rm ./"$source"/"$source"_"$1".txt ./"$source"/"$source"_"$2".txt ./"$source"/"$source"_"$3".txt ./"$source"/"$source"_"$4".txt   ./"$source"/"$source".txt 2>/dev/null
}

Level_Unique()
{
	for i in ${Temporary_Domains[@]} ; 
	do
       		if [ $i == $1 ] ; then
        	    echo "1"
        	fi
       done		
}


Help()
{
   # Display Help
   echo "Syntax: USE ARGS [-d|-h|-s|-v]"
   echo "options:"
   echo "d:--> Specify Sub-Domain Depth."
   echo "h:--> Print this Help."
   echo "s:--> Specify Root Domain."
}

while getopts d:s:hv flag
	do
	    case "${flag}" in
	        d) diggy=${OPTARG};;
	        s) source=${OPTARG};;
	        v) echo "V.0.2"
	           exit;;
	        h) Help 
	           exit;;
	    esac
	done
digstring()
{

for (( i = 1; i <= $diggy; i++ ))
do
	wildcard="[^.*$]*\."
	str=""
	for (( j =1; j <= $i; j++ ))
	do
  		str+="${wildcard}"
	done
	WILD_STRINGS[$i-1]="$str$source"
done
}
digstring

Query_Gen()
{
	if [[ $1 == "BUFFER" ]] 
	then
		echo "curl -s https://tls.bufferover.run/dns?q=$2 | jq .Results[] 2>/dev/null | cut -d ',' -f 3 | sed 's/*//g' | sed 's/\"//g' | sort -u"
	elif [[ $1 == "CRTSH" ]]
	then
		echo "curl -s https://crt.sh/?Identity=%.$2 | grep \">*.$2\" | sed 's/<[/]*[TB][DR]>/\n/g' | grep -vE \"<|^[\*]*[\.]*$2\" | sort -u | awk 'NF'"
	elif [[ $1 == "FINDOMAIN" ]]
	then
		echo "findomain -q -t $2 2>/dev/null | sort -u"
	elif [[ $1 == "SUBFINDER" ]]
	then
		echo "subfinder -silent -d $2"
	fi
}


###################################################################################################################################################################


extract()
{
for sdm in ${Level_Domains[@]}
do
	for domains in `eval $(Query_Gen $2 $sdm)`
	do
		echo $domains | sed 's/www\.//g' | sed 's/^\.//g' | sed 's/^*\.//g'  >> ./"$source"/"$source"_"$2".txt
		for items in `echo $domains  | grep -o ${WILD_STRINGS[$1-1]} | sed 's/www\.//g' | sed 's/^\.//g' | sed 's/^*\.//g'`
		do
			check=$(Level_Unique $items)
			if [[ $check != 1 ]] ; then
				Temporary_Domains+=($items)
			fi
		done
	done
	
done
}
level()
{
for (( level=1;level<=$diggy;level++))
do

	echo -n "$level-->"
	extract $level $1
	unset Level_Domains
	Level_Domains=${Temporary_Domains[@]}
	unset Temporary_Domains
done
}

###################################################################################################################################################################


Query()
{
        mkdir ./"$source" 2>/dev/null
        
        for tool in ${TOOLS[@]}
        do
        	echo "$tool EXTRACTION"
        	Level_Domains=($source)
        	level "$tool" 
        	echo "end"
        	unset Level_Domains
        	unset Temporary_Domains
        	file_organize "$tool"
        done
}
Query
file_merge "CRTSH" "FINDOMAIN" "BUFFER" "SUBFINDER"

###################################################################################################################################################################







