#!/bin/bash


reset=`tput clear`
standout="$(tput smso)"
standoutend="$(tput rmso)"
blink="$(tput blink)"
underline="$(tput smul)"
normal="$(tput sgr0)"
aquatoneThreads=10




recon()
{
	mkdir -p ./RECON/$1 2>/dev/null
	
	
	echo -e "${underline}CERT.SH LOOKUP${normal}"
	curl -s https://crt.sh/?Identity=%.$1 \
	| grep ">*.$1" \
	| sed 's/<[/]*[TB][DR]>/\n/g' \
	| grep -vE "<|^[\*]*[\.]*$1" \
	| sort -u \
	| awk 'NF' \
	| sed 's/www\.//g' \
	| sed 's/^\.//g' \
	| sed 's/^*\.//g' \
	| sort -u  >> ./RECON/"$1"/"$1"_CRSTH.txt

	
	
	echo -e "${underline}BUFFER OVERRUN LOOKUP${normal}"
	curl -s https://tls.bufferover.run/dns?q=$1 \
	| jq .Results[] 2>/dev/null \
	| cut -d ',' -f 3 \
	| sed 's/*//g' \
	| sed 's/\"//g' \
	| sed 's/www\.//g' \
	| sed 's/^\.//g' \
	| sed 's/^*\.//g' \
	| sort -u  >> ./RECON/$1/"$1"_BUFFER.txt
	

	echo -e "${underline}FINDOMAIN LOOKUP${normal}"
	findomain -q -t $1 2>/dev/null  \
	| sed 's/www\.//g' \
	| sed 's/^\.//g' \
	| sed 's/^*\.//g'\
	| sort -u  >> ./RECON/$1/"$1"_FINDOMAIN.txt
	

	echo -e "${underline}SUBFINDER LOOKUP${normal}"
	subfinder -silent -d $1  \
	| sed 's/www\.//g' \
	| sed 's/^\.//g' \
	| sed 's/^*\.//g' \
	| sort -u  >> ./RECON/$1/"$1"_SUBFINDER.txt
	

	echo -e "${underline}SUBLIST3R LOOKUP${normal}"
	python3 ~/../../tools/Sublist3r/sublist3r.py \
	-d $1 -t 10 -v -o ./RECON/$1/"$1"_SUBLIST3R.txt &>/dev/null 
	echo
	

	echo -e "${standout} $1 Merged Records ${standoutend}\n"
	cat ./RECON/$1/"$1"_CRSTH.txt \
	./RECON/$1/"$1"_BUFFER.txt \
	./RECON/$1/"$1"_FINDOMAIN.txt \
	./RECON/$1/"$1"_SUBFINDER.txt \
	./RECON/$1/"$1"_SUBLIST3R.txt \
	| sed 's/www\.//g' \
	| sed 's/^\.//g' \
	| sed 's/^*\.//g' \
	| sort -u \
	| tee ./RECON/$1/"$1"_MERGED.txt
	echo

}

alive()
{

        echo -e "${standout} FETCHING LIVE DOMAINS ${standoutend}\n"
        cat ./RECON/$1/"$1"_MERGED.txt \
        | httpx -silent \
        | sed 's/https\?:\/\///' \
        | tee ./RECON/$1/"$1"_ALIVE.txt
        echo
       
}

dnslookup()
{
	ip_addresses=""
	echo -e "${standout} DNS LOOK-UP ${standoutend}\n"
	while read domain; 
	do
		dns_output=""
  		dig_results=$(dig "$domain" +short \
  		| grep -oP "([0-9]{1,3}\.){3}[0-9]{1,3}" \
  		| xargs -I{} -P 50 naabu -silent -host {})
  		
  		
  		
  		dns_output="$dns_output$domain\n"

  		for ((i=1; i <${#domain}; i++)); 
  		do 
  			dns_output="$dns_output="; 
  		done
  	        
  	        dns_output="$dns_output=\n"

  		while read address; 
  		do
    	
    			dns_output="$dns_output$address\n"
    			#ip_addresses="$ip_addresses$address,"
  	
  		done <<< "$dig_results"

  		dns_output="$dns_output\n"
		
		echo -en "$dns_output" \
		| tee ./RECON/$1/"$1"_LOOKUP.txt  		
  		sleep 3s
	
	done < ./RECON/$1/"$1"_ALIVE.txt
	
}

wayback()
{
	echo -e "${standout} Scraping wayback for data for $1...${standoutend} \n"
	cat ./RECON/$1/"$1"_ALIVE.txt | waybackurls \
	| sort -u \
	> ./RECON/$1/"$1"_waybackurls.txt
	
	cat ./RECON/$1/"$1"_waybackurls.txt  \
	| sort -u \
	| unfurl --unique keys \
	>> ./RECON/$1/paramlist.txt
	[ -s ./RECON/$1/paramlist.txt ] && echo "Wordlist saved to ./RECON/$1/paramlist.txt"

	cat ./RECON/$1/"$1"_waybackurls.txt  \
	| sort -u \
	| grep -P "\w+\.js(\?|$)" \
	| sort -u \
	> ./RECON/$1/"$1"_jsurls.txt
	[ -s ./RECON/$1/"$1"_jsurls.txt ] && echo "JS Urls saved to ./RECON/$1/"$1"_jsurls.txt"

	cat ./RECON/$1/"$1"_waybackurls.txt  \
	| sort -u \
	| grep -P "\w+\.php(\?|$)" \
	| sort -u  \
	> ./RECON/$1/"$1"_phpurls.txt
	[ -s ./RECON/$1/"$1"_phpurls.txt ] && echo "PHP Urls saved to ./RECON/$1/"$1"_phpurls.txt"

	cat ./RECON/$1/"$1"_waybackurls.txt  \
	| sort -u \
	| grep -P "\w+\.aspx(\?|$)" \
	| sort -u  \
	> ./RECON/$1/"$1"_aspxurls.txt
	[ -s ./RECON/$1/"$1"_aspxurls.txt ] && echo "ASP Urls saved to ./RECON/$1/"$1"_aspxurls.txt"

	cat ./RECON/$1/"$1"_waybackurls.txt  \
	| sort -u \
	| grep -P "\w+\.jsp(\?|$)" \
	| sort -u  \
	> ./RECON/$1/"$1"_jspurls.txt
	[ -s ./RECON/$1/"$1"_jspurls.txt ] && echo "JSP Urls saved to ./RECON/$1/"$1"_jspurls.txt"
	echo
		
}



screenshot()
{
	tput sc
	echo "${standout} INITIALIZING SCREENSHOT ${standoutend}"
	mkdir -p \
	./RECON/$1/"$1"_screenShot
	
	python3 \
	/opt/TOOLS/EyeWitness/Python/EyeWitness.py \
	--web \
	--no-prompt \
	-f ./RECON/$1/"$1"_ALIVE.txt \
	-d ./RECON/$1/"$1"_screenShot  \
	--threads $aquatoneThreads
	 
        tput rc;tput ed	
}




Help()
{
   # Display Help
   echo "Syntax: USE ARGS [-d|-h|-s|-v]"
   echo "options:"
   echo "d:--> Specify Sub-Domain Depth.(recommended-3)"
   echo "h:--> Print this Help."
   echo "s:--> Specify Root Domain."
   echo "l:--> Specify Root File."
}


while getopts s:l:hv flag
	do
	    case "${flag}" in
	        s) source=${OPTARG};;
	        l) list=${OPTARG};;
	        v) echo "V.0.2"
	           exit;;
	        h) Help 
	           exit;;
	    esac
	done
	
	
mkdir -p RECON 2>/dev/null



# INCLUDING LIST FLAG (UGLY IF/ELSE)

[[ -z $source ]] && [[ -z $list ]] && echo "flags not specified"
[[ ! -z $source ]] && [[ ! -z $list ]] && echo "target not clear:--> (use -h)"
[[ ! -z $source ]] && [[  -z $list ]] && recon $source && alive $source && screenshot $source
if [[ -z $source ]] && [[ ! -z $list ]];
then

	while read -r line; 
	do
	if [[ ! -z $line ]]
	then
		echo -e "${standout} $line ENUMERATE ${standoutend}\n"
		recon $line
		alive $line
		wayback $line
		dnslookup $line		
	fi
	done < $list
fi

